version: 2.1

orbs:
  rox-orb:
    jobs:
      rox-image-scan:
        machine: true
        parameters:
          rox_api_token:
            description: API key with CI permissions
            type: string
          rox_central_endpoint:
            description: URL of Central (central.contoso.com:443 for example)
            type: string
          rox_image:
            description: Name of image to scan (neilcar/testimage:5 or registry.contoso.com/db_broker:latest for example)
            type: string
          output_format:
            description: Format of image scan output (table | csv | json) (default "json")
            type: string
            default: "table"
        steps:
          - rox-roxctl-install:
              rox_api_token: <<parameters.rox_api_token>>
              rox_central_endpoint: <<parameters.rox_central_endpoint>>
          - run: >-
              ./roxctl --insecure-skip-tls-verify image scan -f -e <<parameters.rox_central_endpoint>> --image <<parameters.rox_image>> --output <<parameters.output_format>> > /tmp/scanner-output.txt
          - store_artifacts:
              path: /tmp/scanner-output.txt
              destination: scanner-output.txt
      rox-image-check:
        machine: true
        parameters:
          rox_api_token:
            description: API key with CI permissions
            type: string
          rox_central_endpoint:
            description: URL of Central (central.contoso.com:443 for example)
            type: string
          rox_image:
            description: Name of image to check (neilcar/testimage:5 or registry.contoso.com/db_broker:latest for example)
            type: string
          output_format:
            description: Format of image scan output (table | csv | json | junit) (default "table")
            type: string
            default: "table"
        steps:
          - rox-roxctl-install:
              rox_api_token: <<parameters.rox_api_token>>
              rox_central_endpoint: <<parameters.rox_central_endpoint>>
          - run: >-
              ./roxctl --insecure-skip-tls-verify image check -e <<parameters.rox_central_endpoint>> --image <<parameters.rox_image>> --output <<parameters.output_format>>
    commands:
      rox-roxctl-install:
        parameters:
          rox_api_token:
            description: API key with CI permissions
            type: string
          rox_central_endpoint:
            description: URL of Central (central.contoso.com:443 for example)
            type: string
        steps:
          - run: >-
              curl -k -L -H "Authorization: Bearer <<parameters.rox_api_token>>" https://<<parameters.rox_central_endpoint>>/api/cli/download/roxctl-linux --output ./roxctl && chmod +x ./roxctl

jobs:
  build-container:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.14
      - run:
          name: "Build application Container image"
          command: |
            docker login -u=$QUAY_USERNAME -p=$QUAY_PASSWORD quay.io
            docker build --label=repository_name=${CIRCLE_PROJECT_REPONAME} --label=branch=${CIRCLE_BRANCH} --label=repository_url=${CIRCLE_REPOSITORY_URL} --label=commit=${CIRCLE_SHA1} -t quay.io/joranbergfeld/log4j_vulnerable_app:${CIRCLE_SHA1} .
            docker push quay.io/joranbergfeld/log4j_vulnerable_app:${CIRCLE_SHA1}

workflows:
  Build application Container image:
    jobs:
      - build-container:
          context: quay
          name: Build application Container image
      - rox-orb/rox-image-scan:
          context: rox
          name: Scan an image
          rox_central_endpoint: $ROX_CENTRAL_ENDPOINT
          rox_api_token: $ROX_API_TOKEN
          rox_image: quay.io/joranbergfeld/log4j_vulnerable_app:${CIRCLE_SHA1}
          requires: [Build application Container image]
      - rox-orb/rox-image-check:
          context: rox
          name: Check an image against build-time policies
          rox_central_endpoint: $ROX_CENTRAL_ENDPOINT
          rox_api_token: $ROX_API_TOKEN
          rox_image: quay.io/joranbergfeld/log4j_vulnerable_app:${CIRCLE_SHA1}
          requires: [Scan an image]
